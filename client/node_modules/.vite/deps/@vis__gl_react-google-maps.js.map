{
  "version": 3,
  "sources": ["../../fast-deep-equal/index.js", "../../@vis.gl/react-google-maps/src/libraries/api-loading-status.ts", "../../@vis.gl/react-google-maps/src/libraries/google-maps-api-loader.ts", "../../@vis.gl/react-google-maps/src/components/api-provider.tsx", "../../@vis.gl/react-google-maps/src/components/map/use-map-events.ts", "../../@vis.gl/react-google-maps/src/libraries/use-deep-compare-effect.tsx", "../../@vis.gl/react-google-maps/src/components/map/use-map-options.ts", "../../@vis.gl/react-google-maps/src/hooks/use-api-loading-status.ts", "../../@vis.gl/react-google-maps/src/components/map/use-deckgl-camera-update.ts", "../../@vis.gl/react-google-maps/src/libraries/lat-lng-utils.ts", "../../@vis.gl/react-google-maps/src/components/map/use-map-camera-params.ts", "../../@vis.gl/react-google-maps/src/components/map/auth-failure-message.tsx", "../../@vis.gl/react-google-maps/src/libraries/use-callback-ref.tsx", "../../@vis.gl/react-google-maps/src/hooks/use-api-is-loaded.ts", "../../@vis.gl/react-google-maps/src/libraries/use-force-update.ts", "../../@vis.gl/react-google-maps/src/components/map/use-tracked-camera-state-ref.ts", "../../@vis.gl/react-google-maps/src/components/map/use-map-instance.ts", "../../@vis.gl/react-google-maps/src/components/map/index.tsx", "../../@vis.gl/react-google-maps/src/libraries/errors.ts", "../../@vis.gl/react-google-maps/src/hooks/use-map.ts", "../../@vis.gl/react-google-maps/src/hooks/use-maps-library.ts", "../../@vis.gl/react-google-maps/src/libraries/set-value-for-styles.ts", "../../@vis.gl/react-google-maps/src/hooks/use-maps-event-listener.ts", "../../@vis.gl/react-google-maps/src/hooks/use-prop-binding.ts", "../../@vis.gl/react-google-maps/src/components/advanced-marker.tsx", "../../@vis.gl/react-google-maps/src/components/info-window.tsx", "../../@vis.gl/react-google-maps/src/components/map-control.tsx", "../../@vis.gl/react-google-maps/src/components/marker.tsx", "../../@vis.gl/react-google-maps/src/components/pin.tsx", "../../@vis.gl/react-google-maps/src/libraries/limit-tilt-range.ts"],
  "sourcesContent": ["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n", "export const APILoadingStatus = {\n  NOT_LOADED: 'NOT_LOADED',\n  LOADING: 'LOADING',\n  LOADED: 'LOADED',\n  FAILED: 'FAILED',\n  AUTH_FAILURE: 'AUTH_FAILURE'\n};\nexport type APILoadingStatus =\n  (typeof APILoadingStatus)[keyof typeof APILoadingStatus];\n", "import {APILoadingStatus} from './api-loading-status';\n\nexport type ApiParams = {\n  key: string;\n  v?: string;\n  language?: string;\n  region?: string;\n  libraries?: string;\n  solutionChannel?: string;\n  authReferrerPolicy?: string;\n};\n\ntype LoadingStatusCallback = (status: APILoadingStatus) => void;\n\nconst MAPS_API_BASE_URL = 'https://maps.googleapis.com/maps/api/js';\n\n/**\n * A GoogleMapsApiLoader to reliably load and unload the Google Maps JavaScript API.\n *\n * The actual loading and unloading is delayed into the microtask queue, to\n * allow using the API in an useEffect hook, without worrying about multiple API loads.\n */\nexport class GoogleMapsApiLoader {\n  /**\n   * The current loadingStatus of the API.\n   */\n  public static loadingStatus: APILoadingStatus = APILoadingStatus.NOT_LOADED;\n\n  /**\n   * The parameters used for first loading the API.\n   */\n  public static serializedApiParams?: string;\n\n  /**\n   * A list of functions to be notified when the loading status changes.\n   */\n  private static listeners: LoadingStatusCallback[] = [];\n\n  /**\n   * Loads the Maps JavaScript API with the specified parameters.\n   * Since the Maps library can only be loaded once per page, this will\n   * produce a warning when called multiple times with different\n   * parameters.\n   *\n   * The returned promise resolves when loading completes\n   * and rejects in case of an error or when the loading was aborted.\n   */\n  static async load(\n    params: ApiParams,\n    onLoadingStatusChange: (status: APILoadingStatus) => void\n  ): Promise<void> {\n    const libraries = params.libraries ? params.libraries.split(',') : [];\n    const serializedParams = this.serializeParams(params);\n\n    this.listeners.push(onLoadingStatusChange);\n\n    // Note: if `google.maps.importLibrary` has been defined externally, we\n    //   assume that loading is complete and successful.\n    //   If it was defined by a previous call to this method, a warning\n    //   message is logged if there are differences in api-parameters used\n    //   for both calls.\n\n    if (window.google?.maps?.importLibrary as unknown) {\n      // no serialized parameters means it was loaded externally\n      if (!this.serializedApiParams) {\n        this.loadingStatus = APILoadingStatus.LOADED;\n      }\n      this.notifyLoadingStatusListeners();\n    } else {\n      this.serializedApiParams = serializedParams;\n      this.initImportLibrary(params);\n    }\n\n    if (\n      this.serializedApiParams &&\n      this.serializedApiParams !== serializedParams\n    ) {\n      console.warn(\n        `[google-maps-api-loader] The maps API has already been loaded ` +\n          `with different parameters and will not be loaded again. Refresh the ` +\n          `page for new values to have effect.`\n      );\n    }\n\n    const librariesToLoad = ['maps', ...libraries];\n    await Promise.all(\n      librariesToLoad.map(name => google.maps.importLibrary(name))\n    );\n  }\n\n  /**\n   * Serialize the paramters used to load the library for easier comparison.\n   */\n  private static serializeParams(params: ApiParams): string {\n    return [\n      params.v,\n      params.key,\n      params.language,\n      params.region,\n      params.authReferrerPolicy,\n      params.solutionChannel\n    ].join('/');\n  }\n\n  /**\n   * Creates the global `google.maps.importLibrary` function for bootstrapping.\n   * This is essentially a formatted version of the dynamic loading script\n   * from the official documentation with some minor adjustments.\n   *\n   * The created importLibrary function will load the Google Maps JavaScript API,\n   * which will then replace the `google.maps.importLibrary` function with the full\n   * implementation.\n   *\n   * @see https://developers.google.com/maps/documentation/javascript/load-maps-js-api#dynamic-library-import\n   */\n  private static initImportLibrary(params: ApiParams) {\n    if (!window.google) window.google = {} as never;\n    if (!window.google.maps) window.google.maps = {} as never;\n\n    if (window.google.maps['importLibrary']) {\n      console.error(\n        '[google-maps-api-loader-internal]: initImportLibrary must only be called once'\n      );\n\n      return;\n    }\n\n    let apiPromise: Promise<void> | null = null;\n\n    const loadApi = () => {\n      if (apiPromise) return apiPromise;\n\n      apiPromise = new Promise((resolve, reject) => {\n        const scriptElement = document.createElement('script');\n        const urlParams = new URLSearchParams();\n\n        for (const [key, value] of Object.entries(params)) {\n          const urlParamName = key.replace(\n            /[A-Z]/g,\n            t => '_' + t[0].toLowerCase()\n          );\n          urlParams.set(urlParamName, value);\n        }\n        urlParams.set('loading', 'async');\n        urlParams.set('callback', '__googleMapsCallback__');\n\n        scriptElement.async = true;\n        scriptElement.src = MAPS_API_BASE_URL + `?` + urlParams.toString();\n        scriptElement.nonce =\n          (document.querySelector('script[nonce]') as HTMLScriptElement)\n            ?.nonce || '';\n\n        scriptElement.onerror = () => {\n          this.loadingStatus = APILoadingStatus.FAILED;\n          this.notifyLoadingStatusListeners();\n          reject(new Error('The Google Maps JavaScript API could not load.'));\n        };\n\n        window.__googleMapsCallback__ = () => {\n          this.loadingStatus = APILoadingStatus.LOADED;\n          this.notifyLoadingStatusListeners();\n          resolve();\n        };\n\n        window.gm_authFailure = () => {\n          this.loadingStatus = APILoadingStatus.AUTH_FAILURE;\n          this.notifyLoadingStatusListeners();\n        };\n\n        this.loadingStatus = APILoadingStatus.LOADING;\n        this.notifyLoadingStatusListeners();\n\n        document.head.append(scriptElement);\n      });\n\n      return apiPromise;\n    };\n\n    // for the first load, we declare an importLibrary function that will\n    // be overwritten once the api is loaded.\n    google.maps.importLibrary = libraryName =>\n      loadApi().then(() => google.maps.importLibrary(libraryName));\n  }\n\n  /**\n   * Calls all registered loadingStatusListeners after a status update.\n   */\n  private static notifyLoadingStatusListeners() {\n    for (const fn of this.listeners) {\n      fn(this.loadingStatus);\n    }\n  }\n}\n\n// Declare global maps callback functions\ndeclare global {\n  interface Window {\n    __googleMapsCallback__?: () => void;\n    gm_authFailure?: () => void;\n  }\n}\n", "import React, {\n  PropsWithChildren,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState\n} from 'react';\n\nimport {\n  ApiParams,\n  GoogleMapsApiLoader\n} from '../libraries/google-maps-api-loader';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n\ntype ImportLibraryFunction = typeof google.maps.importLibrary;\ntype GoogleMapsLibrary = Awaited<ReturnType<ImportLibraryFunction>>;\ntype LoadedLibraries = {[name: string]: GoogleMapsLibrary};\n\nexport interface APIProviderContextValue {\n  status: APILoadingStatus;\n  loadedLibraries: LoadedLibraries;\n  importLibrary: typeof google.maps.importLibrary;\n  mapInstances: Record<string, google.maps.Map>;\n  addMapInstance: (map: google.maps.Map, id?: string) => void;\n  removeMapInstance: (id?: string) => void;\n  clearMapInstances: () => void;\n}\n\nconst DEFAULT_SOLUTION_CHANNEL = 'GMP_visgl_rgmlibrary_v1_default';\n\nexport const APIProviderContext =\n  React.createContext<APIProviderContextValue | null>(null);\n\nexport type APIProviderProps = {\n  /**\n   * apiKey must be provided to load the Google Maps JavaScript API. To create an API key, see: https://developers.google.com/maps/documentation/javascript/get-api-key\n   * Part of:\n   */\n  apiKey: string;\n  /**\n   * A custom id to reference the script tag can be provided. The default is set to 'google-maps-api'\n   * @default 'google-maps-api'\n   */\n  libraries?: Array<string>;\n  /**\n   * A specific version of the Google Maps JavaScript API can be used.\n   * Read more about versioning: https://developers.google.com/maps/documentation/javascript/versions\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  version?: string;\n  /**\n   * Sets the map to a specific region.\n   * Read more about localizing the Map: https://developers.google.com/maps/documentation/javascript/localization\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  region?: string;\n  /**\n   * Use a specific language for the map.\n   * Read more about localizing the Map: https://developers.google.com/maps/documentation/javascript/localization\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  language?: string;\n  /**\n   * auth_referrer_policy can be set to 'origin'.\n   * Part of: https://developers.google.com/maps/documentation/javascript/url-params\n   */\n  authReferrerPolicy?: string;\n  /**\n   * To understand usage and ways to improve our solutions, Google includes the\n   * `solution_channel` query parameter in API calls to gather information about\n   * code usage. You may opt out at any time by setting this attribute to an\n   * empty string. Read more in the\n   * [documentation](https://developers.google.com/maps/reporting-and-monitoring/reporting#solutions-usage).\n   */\n  solutionChannel?: string;\n  /**\n   * A function that can be used to execute code after the Google Maps JavaScript API has been loaded.\n   */\n  onLoad?: () => void;\n};\n\n/**\n * local hook to set up the map-instance management context.\n */\nfunction useMapInstances() {\n  const [mapInstances, setMapInstances] = useState<\n    Record<string, google.maps.Map>\n  >({});\n\n  const addMapInstance = (mapInstance: google.maps.Map, id = 'default') => {\n    setMapInstances(instances => ({...instances, [id]: mapInstance}));\n  };\n\n  const removeMapInstance = (id = 'default') => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMapInstances(({[id]: _, ...remaining}) => remaining);\n  };\n\n  const clearMapInstances = () => {\n    setMapInstances({});\n  };\n\n  return {mapInstances, addMapInstance, removeMapInstance, clearMapInstances};\n}\n\n/**\n * local hook to handle the loading of the maps API, returns the current loading status\n * @param props\n */\nfunction useGoogleMapsApiLoader(props: APIProviderProps) {\n  const {onLoad, apiKey, version, libraries = [], ...otherApiParams} = props;\n\n  const [status, setStatus] = useState<APILoadingStatus>(\n    GoogleMapsApiLoader.loadingStatus\n  );\n  const [loadedLibraries, addLoadedLibrary] = useReducer(\n    (\n      loadedLibraries: LoadedLibraries,\n      action: {name: keyof LoadedLibraries; value: LoadedLibraries[string]}\n    ) => {\n      return {...loadedLibraries, [action.name]: action.value};\n    },\n    {}\n  );\n\n  const librariesString = useMemo(() => libraries?.join(','), [libraries]);\n  const serializedParams = useMemo(\n    () => JSON.stringify({apiKey, version, ...otherApiParams}),\n    [apiKey, version, otherApiParams]\n  );\n\n  const importLibrary: typeof google.maps.importLibrary = useCallback(\n    async (name: string) => {\n      if (loadedLibraries[name]) {\n        return loadedLibraries[name];\n      }\n\n      if (!google?.maps?.importLibrary) {\n        throw new Error(\n          '[api-provider-internal] importLibrary was called before ' +\n            'google.maps.importLibrary was defined.'\n        );\n      }\n\n      const res = await window.google.maps.importLibrary(name);\n      addLoadedLibrary({name, value: res});\n\n      return res;\n    },\n    [loadedLibraries]\n  );\n\n  useEffect(\n    () => {\n      (async () => {\n        try {\n          const params: ApiParams = {key: apiKey, ...otherApiParams};\n          if (version) params.v = version;\n          if (librariesString?.length > 0) params.libraries = librariesString;\n\n          if (params.solutionChannel === undefined)\n            params.solutionChannel = DEFAULT_SOLUTION_CHANNEL;\n          else if (params.solutionChannel === '') delete params.solutionChannel;\n\n          await GoogleMapsApiLoader.load(params, status => setStatus(status));\n\n          for (const name of ['core', 'maps', ...libraries]) {\n            await importLibrary(name);\n          }\n\n          if (onLoad) {\n            onLoad();\n          }\n        } catch (error) {\n          console.error(\n            '<ApiProvider> failed to load the Google Maps JavaScript API',\n            error\n          );\n        }\n      })();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [apiKey, librariesString, serializedParams]\n  );\n\n  return {\n    status,\n    loadedLibraries,\n    importLibrary\n  };\n}\n\n/**\n * Component to wrap the components from this library and load the Google Maps JavaScript API\n */\nexport const APIProvider = (\n  props: PropsWithChildren<APIProviderProps>\n): ReactElement | null => {\n  const {children, ...loaderProps} = props;\n  const {mapInstances, addMapInstance, removeMapInstance, clearMapInstances} =\n    useMapInstances();\n\n  const {status, loadedLibraries, importLibrary} =\n    useGoogleMapsApiLoader(loaderProps);\n\n  const contextValue: APIProviderContextValue = useMemo(\n    () => ({\n      mapInstances,\n      addMapInstance,\n      removeMapInstance,\n      clearMapInstances,\n      status,\n      loadedLibraries,\n      importLibrary\n    }),\n    [\n      mapInstances,\n      addMapInstance,\n      removeMapInstance,\n      clearMapInstances,\n      status,\n      loadedLibraries,\n      importLibrary\n    ]\n  );\n\n  return (\n    <APIProviderContext.Provider value={contextValue}>\n      {children}\n    </APIProviderContext.Provider>\n  );\n};\n", "import {useEffect} from 'react';\n\n/**\n * Handlers for all events that could be emitted by map-instances.\n */\nexport type MapEventProps = Partial<{\n  // map view state events\n  onBoundsChanged: (event: MapCameraChangedEvent) => void;\n  onCenterChanged: (event: MapCameraChangedEvent) => void;\n  onHeadingChanged: (event: MapCameraChangedEvent) => void;\n  onTiltChanged: (event: MapCameraChangedEvent) => void;\n  onZoomChanged: (event: MapCameraChangedEvent) => void;\n  onCameraChanged: (event: MapCameraChangedEvent) => void;\n\n  // mouse / touch / pointer events\n  onClick: (event: MapMouseEvent) => void;\n  onDblclick: (event: MapMouseEvent) => void;\n  onContextmenu: (event: MapMouseEvent) => void;\n  onMousemove: (event: MapMouseEvent) => void;\n  onMouseover: (event: MapMouseEvent) => void;\n  onMouseout: (event: MapMouseEvent) => void;\n  onDrag: (event: MapEvent) => void;\n  onDragend: (event: MapEvent) => void;\n  onDragstart: (event: MapEvent) => void;\n\n  // loading events\n  onTilesLoaded: (event: MapEvent) => void;\n  onIdle: (event: MapEvent) => void;\n\n  // configuration events\n  onProjectionChanged: (event: MapEvent) => void;\n  onIsFractionalZoomEnabledChanged: (event: MapEvent) => void;\n  onMapCapabilitiesChanged: (event: MapEvent) => void;\n  onMapTypeIdChanged: (event: MapEvent) => void;\n  onRenderingTypeChanged: (event: MapEvent) => void;\n}>;\n\n/**\n * Sets up effects to bind event-handlers for all event-props in MapEventProps.\n * @internal\n */\nexport function useMapEvents(\n  map: google.maps.Map | null,\n  props: MapEventProps\n) {\n  // note: calling a useEffect hook from within a loop is prohibited by the\n  // rules of hooks, but it's ok here since it's unconditional and the number\n  // and order of iterations is always strictly the same.\n  // (see https://legacy.reactjs.org/docs/hooks-rules.html)\n\n  for (const propName of eventPropNames) {\n    // fixme: this cast is essentially a 'trust me, bro' for typescript, but\n    //   a proper solution seems way too complicated right now\n    const handler = props[propName] as (ev: MapEvent) => void;\n    const eventType = propNameToEventType[propName];\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (!map) return;\n      if (!handler) return;\n\n      const listener = google.maps.event.addListener(\n        map,\n        eventType,\n        (ev?: google.maps.MapMouseEvent | google.maps.IconMouseEvent) => {\n          handler(createMapEvent(eventType, map, ev));\n        }\n      );\n\n      return () => listener.remove();\n    }, [map, eventType, handler]);\n  }\n}\n\n/**\n * Create the wrapped map-events used for the event-props.\n * @param type the event type as it is specified to the maps api\n * @param map the map instance the event originates from\n * @param srcEvent the source-event if there is one.\n */\nfunction createMapEvent(\n  type: string,\n  map: google.maps.Map,\n  srcEvent?: google.maps.MapMouseEvent | google.maps.IconMouseEvent\n): MapEvent {\n  const ev: MapEvent = {\n    type,\n    map,\n    detail: {},\n    stoppable: false,\n    stop: () => {}\n  };\n\n  if (cameraEventTypes.includes(type)) {\n    const camEvent = ev as MapCameraChangedEvent;\n\n    const center = map.getCenter();\n    const zoom = map.getZoom();\n    const heading = map.getHeading() || 0;\n    const tilt = map.getTilt() || 0;\n    const bounds = map.getBounds();\n\n    if (!center || !bounds || !Number.isFinite(zoom)) {\n      console.warn(\n        '[createEvent] at least one of the values from the map ' +\n          'returned undefined. This is not expected to happen. Please ' +\n          'report an issue at https://github.com/visgl/react-google-maps/issues/new'\n      );\n    }\n\n    camEvent.detail = {\n      center: center?.toJSON() || {lat: 0, lng: 0},\n      zoom: (zoom as number) || 0,\n      heading: heading as number,\n      tilt: tilt as number,\n      bounds: bounds?.toJSON() || {\n        north: 90,\n        east: 180,\n        south: -90,\n        west: -180\n      }\n    };\n\n    return camEvent;\n  } else if (mouseEventTypes.includes(type)) {\n    if (!srcEvent)\n      throw new Error('[createEvent] mouse events must provide a srcEvent');\n    const mouseEvent = ev as MapMouseEvent;\n\n    mouseEvent.domEvent = srcEvent.domEvent;\n    mouseEvent.stoppable = true;\n    mouseEvent.stop = () => srcEvent.stop();\n\n    mouseEvent.detail = {\n      latLng: srcEvent.latLng?.toJSON() || null,\n      placeId: (srcEvent as google.maps.IconMouseEvent).placeId\n    };\n\n    return mouseEvent;\n  }\n\n  return ev;\n}\n\n/**\n * maps the camelCased names of event-props to the corresponding event-types\n * used in the maps API.\n */\nconst propNameToEventType: {[prop in keyof Required<MapEventProps>]: string} = {\n  onBoundsChanged: 'bounds_changed',\n  onCenterChanged: 'center_changed',\n  onClick: 'click',\n  onContextmenu: 'contextmenu',\n  onDblclick: 'dblclick',\n  onDrag: 'drag',\n  onDragend: 'dragend',\n  onDragstart: 'dragstart',\n  onHeadingChanged: 'heading_changed',\n  onIdle: 'idle',\n  onIsFractionalZoomEnabledChanged: 'isfractionalzoomenabled_changed',\n  onMapCapabilitiesChanged: 'mapcapabilities_changed',\n  onMapTypeIdChanged: 'maptypeid_changed',\n  onMousemove: 'mousemove',\n  onMouseout: 'mouseout',\n  onMouseover: 'mouseover',\n  onProjectionChanged: 'projection_changed',\n  onRenderingTypeChanged: 'renderingtype_changed',\n  onTilesLoaded: 'tilesloaded',\n  onTiltChanged: 'tilt_changed',\n  onZoomChanged: 'zoom_changed',\n\n  // note: onCameraChanged is an alias for the bounds_changed event,\n  // since that is going to be fired in every situation where the camera is\n  // updated.\n  onCameraChanged: 'bounds_changed'\n} as const;\n\nconst cameraEventTypes = [\n  'bounds_changed',\n  'center_changed',\n  'heading_changed',\n  'tilt_changed',\n  'zoom_changed'\n];\n\nconst mouseEventTypes = [\n  'click',\n  'contextmenu',\n  'dblclick',\n  'mousemove',\n  'mouseout',\n  'mouseover'\n];\n\ntype MapEventPropName = keyof MapEventProps;\nconst eventPropNames = Object.keys(propNameToEventType) as MapEventPropName[];\n\nexport type MapEvent<T = unknown> = {\n  type: string;\n  map: google.maps.Map;\n  detail: T;\n\n  stoppable: boolean;\n  stop: () => void;\n  domEvent?: MouseEvent | TouchEvent | PointerEvent | KeyboardEvent | Event;\n};\n\nexport type MapMouseEvent = MapEvent<{\n  latLng: google.maps.LatLngLiteral | null;\n  placeId: string | null;\n}>;\n\nexport type MapCameraChangedEvent = MapEvent<{\n  center: google.maps.LatLngLiteral;\n  bounds: google.maps.LatLngBoundsLiteral;\n  zoom: number;\n  heading: number;\n  tilt: number;\n}>;\n", "import {DependencyList, EffectCallback, useEffect, useRef} from 'react';\nimport isDeepEqual from 'fast-deep-equal';\n\nexport function useDeepCompareEffect(\n  effect: EffectCallback,\n  deps: DependencyList\n) {\n  const ref = useRef<DependencyList | undefined>(undefined);\n\n  if (!ref.current || !isDeepEqual(deps, ref.current)) {\n    ref.current = deps;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(effect, ref.current);\n}\n", "import {MapProps} from '../map';\nimport {useDeepCompareEffect} from '../../libraries/use-deep-compare-effect';\n\nconst mapOptionKeys = new Set([\n  'backgroundColor',\n  'clickableIcons',\n  'controlSize',\n  'disableDefaultUI',\n  'disableDoubleClickZoom',\n  'draggable',\n  'draggableCursor',\n  'draggingCursor',\n  'fullscreenControl',\n  'fullscreenControlOptions',\n  'gestureHandling',\n  'isFractionalZoomEnabled',\n  'keyboardShortcuts',\n  'mapTypeControl',\n  'mapTypeControlOptions',\n  'mapTypeId',\n  'maxZoom',\n  'minZoom',\n  'noClear',\n  'panControl',\n  'panControlOptions',\n  'restriction',\n  'rotateControl',\n  'rotateControlOptions',\n  'scaleControl',\n  'scaleControlOptions',\n  'scrollwheel',\n  'streetView',\n  'streetViewControl',\n  'streetViewControlOptions',\n  'styles',\n  'zoomControl',\n  'zoomControlOptions'\n]);\n\n/**\n * Internal hook to update the map-options when props are changed.\n *\n * @param map the map instance\n * @param mapProps the props to update the map-instance with\n * @internal\n */\nexport function useMapOptions(map: google.maps.Map | null, mapProps: MapProps) {\n  /* eslint-disable react-hooks/exhaustive-deps --\n   *\n   * The following effects aren't triggered when the map is changed.\n   * In that case, the values will be or have been passed to the map\n   * constructor via mapOptions.\n   */\n\n  const mapOptions: google.maps.MapOptions = {};\n  const keys = Object.keys(mapProps) as (keyof google.maps.MapOptions)[];\n  for (const key of keys) {\n    if (!mapOptionKeys.has(key)) continue;\n\n    mapOptions[key] = mapProps[key] as never;\n  }\n\n  // update the map options when mapOptions is changed\n  // Note: due to the destructuring above, mapOptions will be seen as changed\n  //   with every re-render, so we're assuming the maps-api will properly\n  //   deal with unchanged option-values passed into setOptions.\n  useDeepCompareEffect(() => {\n    if (!map) return;\n\n    map.setOptions(mapOptions);\n  }, [mapOptions]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n}\n", "import {useContext} from 'react';\nimport {APIProviderContext} from '../components/api-provider';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n\nexport function useApiLoadingStatus(): APILoadingStatus {\n  return useContext(APIProviderContext)?.status || APILoadingStatus.NOT_LOADED;\n}\n", "import {useLayoutEffect} from 'react';\n\nexport type DeckGlCompatProps = {\n  /**\n   * Viewport from deck.gl\n   */\n  viewport?: unknown;\n  /**\n   * View state from deck.gl\n   */\n  viewState?: Record<string, unknown>;\n  /**\n   * Initial View State from deck.gl\n   */\n  initialViewState?: Record<string, unknown>;\n};\n\n/**\n * Internal hook that updates the camera when deck.gl viewState changes.\n * @internal\n */\nexport function useDeckGLCameraUpdate(\n  map: google.maps.Map | null,\n  props: DeckGlCompatProps\n) {\n  const {viewport, viewState} = props;\n  const isDeckGlControlled = !!viewport;\n\n  useLayoutEffect(() => {\n    if (!map || !viewState) return;\n\n    const {\n      latitude,\n      longitude,\n      bearing: heading,\n      pitch: tilt,\n      zoom\n    } = viewState as Record<string, number>;\n\n    map.moveCamera({\n      center: {lat: latitude, lng: longitude},\n      heading,\n      tilt,\n      zoom: zoom + 1\n    });\n  }, [map, viewState]);\n\n  return isDeckGlControlled;\n}\n", "export function isLatLngLiteral(\n  obj: unknown\n): obj is google.maps.LatLngLiteral {\n  if (!obj || typeof obj !== 'object') return false;\n  if (!('lat' in obj && 'lng' in obj)) return false;\n\n  return Number.isFinite(obj.lat) && Number.isFinite(obj.lng);\n}\n\nexport function latLngEquals(\n  a: google.maps.LatLngLiteral | google.maps.LatLng | undefined | null,\n  b: google.maps.LatLngLiteral | google.maps.LatLng | undefined | null\n): boolean {\n  if (!a || !b) return false;\n  const A = toLatLngLiteral(a);\n  const B = toLatLngLiteral(b);\n  if (A.lat !== B.lat || A.lng !== B.lng) return false;\n  return true;\n}\n\nexport function toLatLngLiteral(\n  obj: google.maps.LatLngLiteral | google.maps.LatLng\n): google.maps.LatLngLiteral {\n  if (isLatLngLiteral(obj)) return obj;\n\n  return obj.toJSON();\n}\n", "import {useLayoutEffect} from 'react';\nimport {CameraStateRef} from './use-tracked-camera-state-ref';\nimport {toLatLngLiteral} from '../../libraries/lat-lng-utils';\nimport {MapProps} from '../map';\n\nexport function useMapCameraParams(\n  map: google.maps.Map | null,\n  cameraStateRef: CameraStateRef,\n  mapProps: MapProps\n) {\n  const center = mapProps.center ? toLatLngLiteral(mapProps.center) : null;\n\n  let lat: number | null = null;\n  let lng: number | null = null;\n\n  if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n    lat = center.lat as number;\n    lng = center.lng as number;\n  }\n\n  const zoom: number | null = Number.isFinite(mapProps.zoom)\n    ? (mapProps.zoom as number)\n    : null;\n  const heading: number | null = Number.isFinite(mapProps.heading)\n    ? (mapProps.heading as number)\n    : null;\n  const tilt: number | null = Number.isFinite(mapProps.tilt)\n    ? (mapProps.tilt as number)\n    : null;\n\n  // the following effect runs for every render of the map component and checks\n  // if there are differences between the known state of the map instance\n  // (cameraStateRef, which is updated by all bounds_changed events) and the\n  // desired state in the props.\n\n  useLayoutEffect(() => {\n    if (!map) return;\n\n    const nextCamera: google.maps.CameraOptions = {};\n    let needsUpdate = false;\n\n    if (\n      lat !== null &&\n      lng !== null &&\n      (cameraStateRef.current.center.lat !== lat ||\n        cameraStateRef.current.center.lng !== lng)\n    ) {\n      nextCamera.center = {lat, lng};\n      needsUpdate = true;\n    }\n\n    if (zoom !== null && cameraStateRef.current.zoom !== zoom) {\n      nextCamera.zoom = zoom as number;\n      needsUpdate = true;\n    }\n\n    if (heading !== null && cameraStateRef.current.heading !== heading) {\n      nextCamera.heading = heading as number;\n      needsUpdate = true;\n    }\n\n    if (tilt !== null && cameraStateRef.current.tilt !== tilt) {\n      nextCamera.tilt = tilt as number;\n      needsUpdate = true;\n    }\n\n    if (needsUpdate) {\n      map.moveCamera(nextCamera);\n    }\n  });\n}\n", "import React, {CSSProperties} from 'react';\n\nexport const AuthFailureMessage = () => {\n  const style: CSSProperties = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    zIndex: 999,\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    textAlign: 'center',\n    justifyContent: 'center',\n    fontSize: '.8rem',\n    color: 'rgba(0,0,0,0.6)',\n    background: '#dddddd',\n    padding: '1rem 1.5rem'\n  };\n\n  return (\n    <div style={style}>\n      <h2>Error: AuthFailure</h2>\n      <p>\n        A problem with your API key prevents the map from rendering correctly.\n        Please make sure the value of the <code>APIProvider.apiKey</code> prop\n        is correct. Check the error-message in the console for further details.\n      </p>\n    </div>\n  );\n};\n", "import {Ref, useCallback, useState} from 'react';\n\nexport function useCallbackRef<T>() {\n  const [el, setEl] = useState<T | null>(null);\n  const ref = useCallback((value: T) => setEl(value), [setEl]);\n\n  return [el, ref as Ref<T>] as const;\n}\n", "import {useApiLoadingStatus} from './use-api-loading-status';\nimport {APILoadingStatus} from '../libraries/api-loading-status';\n/**\n * Hook to check if the Maps JavaScript API is loaded\n */\nexport function useApiIsLoaded(): boolean {\n  const status = useApiLoadingStatus();\n\n  return status === APILoadingStatus.LOADED;\n}\n", "import {useReducer} from 'react';\n\nexport function useForceUpdate(): () => void {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n\n  return forceUpdate;\n}\n", "import {MutableRefObject, useEffect, useRef} from 'react';\nimport {useForceUpdate} from '../../libraries/use-force-update';\n\nexport type CameraState = {\n  center: google.maps.LatLngLiteral;\n  heading: number;\n  tilt: number;\n  zoom: number;\n};\n\nexport type CameraStateRef = MutableRefObject<CameraState>;\n\nfunction handleBoundsChange(map: google.maps.Map, ref: CameraStateRef) {\n  const center = map.getCenter();\n  const zoom = map.getZoom();\n  const heading = map.getHeading() || 0;\n  const tilt = map.getTilt() || 0;\n  const bounds = map.getBounds();\n\n  if (!center || !bounds || !Number.isFinite(zoom)) {\n    console.warn(\n      '[useTrackedCameraState] at least one of the values from the map ' +\n        'returned undefined. This is not expected to happen. Please ' +\n        'report an issue at https://github.com/visgl/react-google-maps/issues/new'\n    );\n  }\n\n  // fixme: do we need the `undefined` cases for the camera-params? When are they used in the maps API?\n  Object.assign(ref.current, {\n    center: center?.toJSON() || {lat: 0, lng: 0},\n    zoom: (zoom as number) || 0,\n    heading: heading as number,\n    tilt: tilt as number\n  });\n}\n\n/**\n * Creates a mutable ref object to track the last known state of the map camera.\n * This is used in `useMapCameraParams` to reduce stuttering in normal operation\n * by avoiding updates of the map camera with values that have already been processed.\n */\nexport function useTrackedCameraStateRef(\n  map: google.maps.Map | null\n): CameraStateRef {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef<CameraState>({\n    center: {lat: 0, lng: 0},\n    heading: 0,\n    tilt: 0,\n    zoom: 0\n  });\n\n  // Record camera state with every bounds_changed event dispatched by the map.\n  // This data is used to prevent feeding these values back to the\n  // map-instance when a typical \"controlled component\" setup (state variable is\n  // fed into and updated by the map).\n  useEffect(() => {\n    if (!map) return;\n\n    const listener = google.maps.event.addListener(\n      map,\n      'bounds_changed',\n      () => {\n        handleBoundsChange(map, ref);\n\n        // When an event is occured, we have to update during the next cycle.\n        // The application could decide to ignore the event and not update any\n        // camera props of the map, meaning that in that case we will have to\n        // 'undo' the change to the camera.\n        forceUpdate();\n      }\n    );\n\n    return () => listener.remove();\n  }, [map, forceUpdate]);\n\n  return ref;\n}\n", "import {Ref, useEffect, useRef, useState} from 'react';\n\nimport {MapProps} from '../map';\nimport {APIProviderContextValue} from '../api-provider';\n\nimport {useCallbackRef} from '../../libraries/use-callback-ref';\nimport {useApiIsLoaded} from '../../hooks/use-api-is-loaded';\nimport {\n  CameraState,\n  CameraStateRef,\n  useTrackedCameraStateRef\n} from './use-tracked-camera-state-ref';\n\n/**\n * Stores a stack of map-instances for each mapId. Whenever an\n * instance is used, it is removed from the stack while in use,\n * and returned to the stack when the component unmounts.\n * This allows us to correctly implement caching for multiple\n * maps om the same page, while reusing as much as possible.\n *\n * FIXME: while it should in theory be possible to reuse maps solely\n *   based on the mapId (as all other parameters can be changed at\n *   runtime), we don't yet have good enough tracking of options to\n *   reliably unset all the options that have been set.\n */\nclass CachedMapStack {\n  static entries: {[key: string]: google.maps.Map[]} = {};\n\n  static has(key: string) {\n    return this.entries[key] && this.entries[key].length > 0;\n  }\n\n  static pop(key: string) {\n    if (!this.entries[key]) return null;\n\n    return this.entries[key].pop() || null;\n  }\n\n  static push(key: string, value: google.maps.Map) {\n    if (!this.entries[key]) this.entries[key] = [];\n\n    this.entries[key].push(value);\n  }\n}\n\n/**\n * The main hook takes care of creating map-instances and registering them in\n * the api-provider context.\n * @return a tuple of the map-instance created (or null) and the callback\n *   ref that will be used to pass the map-container into this hook.\n * @internal\n */\nexport function useMapInstance(\n  props: MapProps,\n  context: APIProviderContextValue\n): readonly [\n  map: google.maps.Map | null,\n  containerRef: Ref<HTMLDivElement>,\n  cameraStateRef: CameraStateRef\n] {\n  const apiIsLoaded = useApiIsLoaded();\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n  const [container, containerRef] = useCallbackRef<HTMLDivElement>();\n\n  const cameraStateRef = useTrackedCameraStateRef(map);\n\n  const {\n    id,\n    defaultBounds,\n    defaultCenter,\n    defaultZoom,\n    defaultHeading,\n    defaultTilt,\n    reuseMaps,\n\n    ...mapOptions\n  } = props;\n\n  const hasZoom = props.zoom !== undefined || props.defaultZoom !== undefined;\n  const hasCenter =\n    props.center !== undefined || props.defaultCenter !== undefined;\n\n  if (!defaultBounds && (!hasZoom || !hasCenter)) {\n    console.warn(\n      '<Map> component is missing configuration. ' +\n        'You have to provide zoom and center (via the `zoom`/`defaultZoom` and ' +\n        '`center`/`defaultCenter` props) or specify the region to show using ' +\n        '`defaultBounds`. See ' +\n        'https://visgl.github.io/react-google-maps/docs/api-reference/components/map#required'\n    );\n  }\n\n  // apply default camera props if available and not overwritten by controlled props\n  if (!mapOptions.center && defaultCenter) mapOptions.center = defaultCenter;\n  if (!mapOptions.zoom && Number.isFinite(defaultZoom))\n    mapOptions.zoom = defaultZoom;\n  if (!mapOptions.heading && Number.isFinite(defaultHeading))\n    mapOptions.heading = defaultHeading;\n  if (!mapOptions.tilt && Number.isFinite(defaultTilt))\n    mapOptions.tilt = defaultTilt;\n\n  for (const key of Object.keys(mapOptions) as (keyof typeof mapOptions)[])\n    if (mapOptions[key] === undefined) delete mapOptions[key];\n\n  const savedMapStateRef = useRef<{\n    mapId?: string | null;\n    cameraState: CameraState;\n  }>();\n\n  // create the map instance and register it in the context\n  useEffect(\n    () => {\n      if (!container || !apiIsLoaded) return;\n\n      const {addMapInstance, removeMapInstance} = context;\n\n      const mapId = props.mapId;\n      const cacheKey = mapId || 'default';\n      let mapDiv: HTMLElement;\n      let map: google.maps.Map;\n\n      if (reuseMaps && CachedMapStack.has(cacheKey)) {\n        map = CachedMapStack.pop(cacheKey) as google.maps.Map;\n        mapDiv = map.getDiv();\n\n        container.appendChild(mapDiv);\n        map.setOptions(mapOptions);\n\n        // detaching the element from the DOM lets the map fall back to its default\n        // size, setting the center will trigger reloading the map.\n        setTimeout(() => map.setCenter(map.getCenter()!), 0);\n      } else {\n        mapDiv = document.createElement('div');\n        mapDiv.style.height = '100%';\n        container.appendChild(mapDiv);\n        map = new google.maps.Map(mapDiv, mapOptions);\n      }\n\n      setMap(map);\n      addMapInstance(map, id);\n\n      if (defaultBounds) {\n        const {padding, ...defBounds} = defaultBounds;\n        map.fitBounds(defBounds, padding);\n      }\n\n      // prevent map not rendering due to missing configuration\n      else if (!hasZoom || !hasCenter) {\n        map.fitBounds({east: 180, west: -180, south: -90, north: 90});\n      }\n\n      // the savedMapState is used to restore the camera parameters when the mapId is changed\n      if (savedMapStateRef.current) {\n        const {mapId: savedMapId, cameraState: savedCameraState} =\n          savedMapStateRef.current;\n        if (savedMapId !== mapId) {\n          map.setOptions(savedCameraState);\n        }\n      }\n\n      return () => {\n        savedMapStateRef.current = {\n          mapId,\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          cameraState: cameraStateRef.current\n        };\n\n        // detach the map-div from the dom\n        mapDiv.remove();\n\n        if (reuseMaps) {\n          // push back on the stack\n          CachedMapStack.push(cacheKey, map);\n        } else {\n          // remove all event-listeners to minimize the possibility of memory-leaks\n          google.maps.event.clearInstanceListeners(map);\n        }\n\n        setMap(null);\n        removeMapInstance(id);\n      };\n    },\n\n    // some dependencies are ignored in the list below:\n    //  - defaultBounds and the default* camera props will only be used once, and\n    //    changes should be ignored\n    //  - mapOptions has special hooks that take care of updating the options\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [container, apiIsLoaded, id, props.mapId]\n  );\n\n  return [map, containerRef, cameraStateRef] as const;\n}\n", "/* eslint-disable complexity */\nimport React, {\n  CSSProperties,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useMemo\n} from 'react';\n\nimport {APIProviderContext} from '../api-provider';\n\nimport {MapEventProps, useMapEvents} from './use-map-events';\nimport {useMapOptions} from './use-map-options';\nimport {useApiLoadingStatus} from '../../hooks/use-api-loading-status';\nimport {APILoadingStatus} from '../../libraries/api-loading-status';\nimport {\n  DeckGlCompatProps,\n  useDeckGLCameraUpdate\n} from './use-deckgl-camera-update';\nimport {toLatLngLiteral} from '../../libraries/lat-lng-utils';\nimport {useMapCameraParams} from './use-map-camera-params';\nimport {AuthFailureMessage} from './auth-failure-message';\nimport {useMapInstance} from './use-map-instance';\n\nexport interface GoogleMapsContextValue {\n  map: google.maps.Map | null;\n}\nexport const GoogleMapsContext =\n  React.createContext<GoogleMapsContextValue | null>(null);\n\nexport type {\n  MapCameraChangedEvent,\n  MapEvent,\n  MapEventProps,\n  MapMouseEvent\n} from './use-map-events';\n\nexport type MapCameraProps = {\n  center: google.maps.LatLngLiteral;\n  zoom: number;\n  heading?: number;\n  tilt?: number;\n};\n\n/**\n * Props for the Map Component\n */\nexport type MapProps = google.maps.MapOptions &\n  MapEventProps &\n  DeckGlCompatProps & {\n    /**\n     * An id for the map, this is required when multiple maps are present\n     * in the same APIProvider context.\n     */\n    id?: string;\n    /**\n     * Additional style rules to apply to the map dom-element.\n     */\n    style?: CSSProperties;\n    /**\n     * Additional css class-name to apply to the element containing the map.\n     */\n    className?: string;\n    /**\n     * Indicates that the map will be controlled externally. Disables all controls provided by the map itself.\n     */\n    controlled?: boolean;\n\n    /**\n     * Enable caching of map-instances created by this component.\n     */\n    reuseMaps?: boolean;\n\n    defaultCenter?: google.maps.LatLngLiteral;\n    defaultZoom?: number;\n    defaultHeading?: number;\n    defaultTilt?: number;\n    /**\n     * Alternative way to specify the default camera props as a geographic region that should be fully visible\n     */\n    defaultBounds?: google.maps.LatLngBoundsLiteral & {\n      padding?: number | google.maps.Padding;\n    };\n  };\n\nexport const Map = (props: PropsWithChildren<MapProps>) => {\n  const {children, id, className, style} = props;\n  const context = useContext(APIProviderContext);\n  const loadingStatus = useApiLoadingStatus();\n\n  if (!context) {\n    throw new Error(\n      '<Map> can only be used inside an <ApiProvider> component.'\n    );\n  }\n\n  const [map, mapRef, cameraStateRef] = useMapInstance(props, context);\n\n  useMapCameraParams(map, cameraStateRef, props);\n  useMapEvents(map, props);\n  useMapOptions(map, props);\n\n  const isDeckGlControlled = useDeckGLCameraUpdate(map, props);\n  const isControlledExternally = !!props.controlled;\n\n  // disable interactions with the map for externally controlled maps\n  useEffect(() => {\n    if (!map) return;\n\n    // fixme: this doesn't seem to belong here (and it's mostly there for convenience anyway).\n    //   The reasoning is that a deck.gl canvas will be put on top of the map, rendering\n    //   any default map controls pretty much useless\n    if (isDeckGlControlled) {\n      map.setOptions({disableDefaultUI: true});\n    }\n\n    // disable all control-inputs when the map is controlled externally\n    if (isDeckGlControlled || isControlledExternally) {\n      map.setOptions({\n        gestureHandling: 'none',\n        keyboardShortcuts: false\n      });\n    }\n\n    return () => {\n      map.setOptions({\n        gestureHandling: props.gestureHandling,\n        keyboardShortcuts: props.keyboardShortcuts\n      });\n    };\n  }, [\n    map,\n    isDeckGlControlled,\n    isControlledExternally,\n    props.gestureHandling,\n    props.keyboardShortcuts\n  ]);\n\n  // setup a stable cameraOptions object that can be used as dependency\n  const center = props.center ? toLatLngLiteral(props.center) : null;\n  let lat: number | null = null;\n  let lng: number | null = null;\n  if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n    lat = center.lat as number;\n    lng = center.lng as number;\n  }\n\n  const cameraOptions: google.maps.CameraOptions = useMemo(() => {\n    return {\n      center: {lat: lat ?? 0, lng: lng ?? 0},\n      zoom: props.zoom ?? 0,\n      heading: props.heading ?? 0,\n      tilt: props.tilt ?? 0\n    };\n  }, [lat, lng, props.zoom, props.heading, props.tilt]);\n\n  // externally controlled mode: reject all camera changes that don't correspond to changes in props\n  useLayoutEffect(() => {\n    if (!map || !isControlledExternally) return;\n\n    map.moveCamera(cameraOptions);\n    const listener = map.addListener('bounds_changed', () => {\n      map.moveCamera(cameraOptions);\n    });\n\n    return () => listener.remove();\n  }, [map, isControlledExternally, cameraOptions]);\n\n  const combinedStyle: CSSProperties = useMemo(\n    () => ({\n      width: '100%',\n      height: '100%',\n      position: 'relative',\n      // when using deckgl, the map should be sent to the back\n      zIndex: isDeckGlControlled ? -1 : 0,\n\n      ...style\n    }),\n    [style, isDeckGlControlled]\n  );\n\n  const contextValue: GoogleMapsContextValue = useMemo(() => ({map}), [map]);\n\n  if (loadingStatus === APILoadingStatus.AUTH_FAILURE) {\n    return (\n      <div\n        style={{position: 'relative', ...(className ? {} : combinedStyle)}}\n        className={className}>\n        <AuthFailureMessage />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={mapRef}\n      data-testid={'map'}\n      style={className ? undefined : combinedStyle}\n      className={className}\n      {...(id ? {id} : {})}>\n      {map ? (\n        <GoogleMapsContext.Provider value={contextValue}>\n          {children}\n        </GoogleMapsContext.Provider>\n      ) : null}\n    </div>\n  );\n};\nMap.deckGLViewProps = true;\n", "const shownMessages = new Set();\n\nexport function logErrorOnce(...args: Parameters<typeof console.error>) {\n  const key = JSON.stringify(args);\n\n  if (!shownMessages.has(key)) {\n    shownMessages.add(key);\n\n    console.error(...args);\n  }\n}\n", "import {useContext} from 'react';\n\nimport {APIProviderContext} from '../components/api-provider';\nimport {GoogleMapsContext} from '../components/map';\nimport {logErrorOnce} from '../libraries/errors';\n\n/**\n * Retrieves a map-instance from the context. This is either an instance\n * identified by id or the parent map instance if no id is specified.\n * Returns null if neither can be found.\n */\nexport const useMap = (id: string | null = null): google.maps.Map | null => {\n  const ctx = useContext(APIProviderContext);\n  const {map} = useContext(GoogleMapsContext) || {};\n\n  if (ctx === null) {\n    logErrorOnce(\n      'useMap(): failed to retrieve APIProviderContext. ' +\n        'Make sure that the <APIProvider> component exists and that the ' +\n        'component you are calling `useMap()` from is a sibling of the ' +\n        '<APIProvider>.'\n    );\n\n    return null;\n  }\n\n  const {mapInstances} = ctx;\n\n  // if an id is specified, the corresponding map or null is returned\n  if (id !== null) return mapInstances[id] || null;\n\n  // otherwise, return the closest ancestor\n  if (map) return map;\n\n  // finally, return the default map instance\n  return mapInstances['default'] || null;\n};\n", "import {useContext, useEffect} from 'react';\n\nimport {APIProviderContext} from '../components/api-provider';\nimport {useApiIsLoaded} from './use-api-is-loaded';\n\ninterface ApiLibraries {\n  core: google.maps.CoreLibrary;\n  maps: google.maps.MapsLibrary;\n  places: google.maps.PlacesLibrary;\n  geocoding: google.maps.GeocodingLibrary;\n  routes: google.maps.RoutesLibrary;\n  marker: google.maps.MarkerLibrary;\n  geometry: google.maps.GeometryLibrary;\n  elevation: google.maps.ElevationLibrary;\n  streetView: google.maps.StreetViewLibrary;\n  journeySharing: google.maps.JourneySharingLibrary;\n  drawing: google.maps.DrawingLibrary;\n  visualization: google.maps.VisualizationLibrary;\n}\n\nexport function useMapsLibrary<\n  K extends keyof ApiLibraries,\n  V extends ApiLibraries[K]\n>(name: K): V | null;\n\nexport function useMapsLibrary(name: string) {\n  const apiIsLoaded = useApiIsLoaded();\n  const ctx = useContext(APIProviderContext);\n\n  useEffect(() => {\n    if (!apiIsLoaded || !ctx) return;\n\n    // Trigger loading the libraries via our proxy-method.\n    // The returned promise is ignored, since importLibrary will update loadedLibraries\n    // list in the context, triggering a re-render.\n    void ctx.importLibrary(name);\n  }, [apiIsLoaded, ctx, name]);\n\n  return ctx?.loadedLibraries[name] || null;\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/*\n * The code in this file was adapted from the internal react-dom-bindings package.\n * https://github.com/facebook/react/tree/4508873393058e86bed308b56e49ec883ece59d1/packages/react-dom-bindings\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport {CSSProperties} from 'react';\n\nexport function setValueForStyles(\n  element: HTMLElement,\n  styles: CSSProperties | null,\n  prevStyles: CSSProperties | null\n) {\n  if (styles != null && typeof styles !== 'object') {\n    throw new Error(\n      'The `style` prop expects a mapping from style properties to values, ' +\n        \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" +\n        'using JSX.'\n    );\n  }\n\n  const elementStyle = element.style;\n\n  // without `prevStyles`, just set all values\n  if (prevStyles == null) {\n    if (styles == null) return;\n\n    for (const styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) continue;\n\n      setValueForStyle(\n        elementStyle,\n        styleName,\n        styles[styleName as keyof CSSProperties]\n      );\n    }\n\n    return;\n  }\n\n  // unset all styles in `prevStyles` that aren't in `styles`\n  for (const styleName in prevStyles) {\n    if (\n      prevStyles.hasOwnProperty(styleName) &&\n      (styles == null || !styles.hasOwnProperty(styleName))\n    ) {\n      // Clear style\n      const isCustomProperty = styleName.indexOf('--') === 0;\n      if (isCustomProperty) {\n        elementStyle.setProperty(styleName, '');\n      } else if (styleName === 'float') {\n        elementStyle.cssFloat = '';\n      } else {\n        elementStyle[styleName as any] = '';\n      }\n    }\n  }\n\n  // only assign values from `styles` that are different from `prevStyles`\n  if (styles == null) return;\n\n  for (const styleName in styles) {\n    const value = styles[styleName as keyof CSSProperties];\n    if (\n      styles.hasOwnProperty(styleName) &&\n      prevStyles[styleName as keyof CSSProperties] !== value\n    ) {\n      setValueForStyle(elementStyle, styleName, value);\n    }\n  }\n}\n\nfunction setValueForStyle(\n  elementStyle: CSSStyleDeclaration,\n  styleName: string,\n  value: unknown\n) {\n  const isCustomProperty = styleName.indexOf('--') === 0;\n\n  // falsy values will unset the style property\n  if (value == null || typeof value === 'boolean' || value === '') {\n    if (isCustomProperty) {\n      elementStyle.setProperty(styleName, '');\n    } else if (styleName === 'float') {\n      elementStyle.cssFloat = '';\n    } else {\n      elementStyle[styleName as any] = '';\n    }\n  }\n\n  // custom properties can't be directly assigned\n  else if (isCustomProperty) {\n    elementStyle.setProperty(styleName, value as string);\n  }\n\n  // numeric values are treated as 'px' unless the style property expects unitless numbers\n  else if (\n    typeof value === 'number' &&\n    value !== 0 &&\n    !isUnitlessNumber(styleName)\n  ) {\n    elementStyle[styleName as any] = value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  // everything else can just be assigned\n  else {\n    if (styleName === 'float') {\n      elementStyle.cssFloat = value as string;\n    } else {\n      elementStyle[styleName as any] = ('' + value).trim();\n    }\n  }\n}\n\n// CSS properties which accept numbers but are not in units of \"px\".\nconst unitlessNumbers = new Set([\n  'animationIterationCount',\n  'aspectRatio',\n  'borderImageOutset',\n  'borderImageSlice',\n  'borderImageWidth',\n  'boxFlex',\n  'boxFlexGroup',\n  'boxOrdinalGroup',\n  'columnCount',\n  'columns',\n  'flex',\n  'flexGrow',\n  'flexPositive',\n  'flexShrink',\n  'flexNegative',\n  'flexOrder',\n  'gridArea',\n  'gridRow',\n  'gridRowEnd',\n  'gridRowSpan',\n  'gridRowStart',\n  'gridColumn',\n  'gridColumnEnd',\n  'gridColumnSpan',\n  'gridColumnStart',\n  'fontWeight',\n  'lineClamp',\n  'lineHeight',\n  'opacity',\n  'order',\n  'orphans',\n  'scale',\n  'tabSize',\n  'widows',\n  'zIndex',\n  'zoom',\n  'fillOpacity', // SVG-related properties\n  'floodOpacity',\n  'stopOpacity',\n  'strokeDasharray',\n  'strokeDashoffset',\n  'strokeMiterlimit',\n  'strokeOpacity',\n  'strokeWidth'\n]);\nfunction isUnitlessNumber(name: string): boolean {\n  return unitlessNumbers.has(name);\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {useEffect} from 'react';\n\n/**\n * Internally used to bind events to Maps JavaScript API objects.\n * @internal\n */\nexport function useMapsEventListener<T extends (...args: any[]) => void>(\n  target?: object | null,\n  name?: string,\n  callback?: T | null\n) {\n  useEffect(() => {\n    if (!target || !name || !callback) return;\n\n    const listener = google.maps.event.addListener(target, name, callback);\n\n    return () => listener.remove();\n  }, [target, name, callback]);\n}\n", "import {useEffect} from 'react';\n\n/**\n * Internally used to copy values from props into API-Objects\n * whenever they change.\n *\n * @example\n *   usePropBinding(marker, 'position', position);\n *\n * @internal\n */\nexport function usePropBinding<T extends object, K extends keyof T>(\n  object: T | null,\n  prop: K,\n  value: T[K]\n) {\n  useEffect(() => {\n    if (!object) return;\n\n    object[prop] = value;\n  }, [object, prop, value]);\n}\n", "/* eslint-disable complexity */\nimport React, {\n  Children,\n  CSSProperties,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\n\nimport {createPortal} from 'react-dom';\nimport {useMap} from '../hooks/use-map';\nimport {useMapsLibrary} from '../hooks/use-maps-library';\nimport {setValueForStyles} from '../libraries/set-value-for-styles';\n\nimport type {Ref, PropsWithChildren} from 'react';\nimport {useMapsEventListener} from '../hooks/use-maps-event-listener';\nimport {usePropBinding} from '../hooks/use-prop-binding';\n\nexport interface AdvancedMarkerContextValue {\n  marker: google.maps.marker.AdvancedMarkerElement;\n}\n\n/**\n * Copy of the `google.maps.CollisionBehavior` constants.\n * They have to be duplicated here since we can't wait for the maps API to load to be able to use them.\n */\nexport const CollisionBehavior = {\n  REQUIRED: 'REQUIRED',\n  REQUIRED_AND_HIDES_OPTIONAL: 'REQUIRED_AND_HIDES_OPTIONAL',\n  OPTIONAL_AND_HIDES_LOWER_PRIORITY: 'OPTIONAL_AND_HIDES_LOWER_PRIORITY'\n} as const;\nexport type CollisionBehavior =\n  (typeof CollisionBehavior)[keyof typeof CollisionBehavior];\n\nexport const AdvancedMarkerContext =\n  React.createContext<AdvancedMarkerContextValue | null>(null);\n\ntype AdvancedMarkerEventProps = {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n};\n\nexport type AdvancedMarkerProps = PropsWithChildren<\n  Omit<\n    google.maps.marker.AdvancedMarkerElementOptions,\n    'gmpDraggable' | 'gmpClickable' | 'content' | 'map' | 'collisionBehavior'\n  > &\n    AdvancedMarkerEventProps & {\n      draggable?: boolean;\n      clickable?: boolean;\n      collisionBehavior?: CollisionBehavior;\n      /**\n       * A className for the content element.\n       * (can only be used with HTML Marker content)\n       */\n      className?: string;\n      /**\n       * Additional styles to apply to the content element.\n       */\n      style?: CSSProperties;\n    }\n>;\n\nexport type AdvancedMarkerRef = google.maps.marker.AdvancedMarkerElement | null;\nfunction useAdvancedMarker(props: AdvancedMarkerProps) {\n  const [marker, setMarker] =\n    useState<google.maps.marker.AdvancedMarkerElement | null>(null);\n  const [contentContainer, setContentContainer] =\n    useState<HTMLDivElement | null>(null);\n\n  const prevStyleRef = useRef<CSSProperties | null>(null);\n\n  const map = useMap();\n  const markerLibrary = useMapsLibrary('marker');\n\n  const {\n    children,\n    className,\n    style,\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    collisionBehavior,\n    clickable,\n    draggable,\n    position,\n    title,\n    zIndex\n  } = props;\n\n  const numChildren = Children.count(children);\n\n  // create an AdvancedMarkerElement instance and add it to the map once available\n  useEffect(() => {\n    if (!map || !markerLibrary) return;\n\n    const newMarker = new markerLibrary.AdvancedMarkerElement();\n    newMarker.map = map;\n\n    setMarker(newMarker);\n\n    // create the container for marker content if there are children\n    let contentElement: HTMLDivElement | null = null;\n    if (numChildren > 0) {\n      contentElement = document.createElement('div');\n\n      newMarker.content = contentElement;\n      setContentContainer(contentElement);\n    }\n\n    return () => {\n      newMarker.map = null;\n      contentElement?.remove();\n      setMarker(null);\n      setContentContainer(null);\n    };\n  }, [map, markerLibrary, numChildren]);\n\n  // update className and styles of marker.content element\n  useEffect(() => {\n    if (!marker || !marker.content) return;\n\n    (marker.content as HTMLElement).className = className || '';\n  }, [marker, className]);\n\n  usePropBinding(contentContainer, 'className', className ?? '');\n  useEffect(() => {\n    if (!contentContainer) return;\n\n    setValueForStyles(contentContainer, style || null, prevStyleRef.current);\n    prevStyleRef.current = style || null;\n  }, [contentContainer, className, style]);\n\n  // copy other props\n  usePropBinding(marker, 'position', position);\n  usePropBinding(marker, 'title', title ?? '');\n  usePropBinding(marker, 'zIndex', zIndex);\n  usePropBinding(\n    marker,\n    'collisionBehavior',\n    collisionBehavior as google.maps.CollisionBehavior\n  );\n\n  // set gmpDraggable from props (when unspecified, it's true if any drag-event\n  // callbacks are specified)\n  useEffect(() => {\n    if (!marker) return;\n\n    if (draggable !== undefined) marker.gmpDraggable = draggable;\n    else if (onDrag || onDragStart || onDragEnd) marker.gmpDraggable = true;\n    else marker.gmpDraggable = false;\n  }, [marker, draggable, onDrag, onDragEnd, onDragStart]);\n\n  // set gmpClickable from props (when unspecified, it's true if the onClick event\n  // callback is specified)\n  useEffect(() => {\n    if (!marker) return;\n\n    if (clickable !== undefined) marker.gmpClickable = clickable;\n    else if (onClick) marker.gmpClickable = true;\n    else marker.gmpClickable = false;\n  }, [marker, clickable, onClick]);\n\n  useMapsEventListener(marker, 'click', onClick);\n  useMapsEventListener(marker, 'drag', onDrag);\n  useMapsEventListener(marker, 'dragstart', onDragStart);\n  useMapsEventListener(marker, 'dragend', onDragEnd);\n\n  return [marker, contentContainer] as const;\n}\n\nexport const AdvancedMarker = forwardRef(\n  (props: AdvancedMarkerProps, ref: Ref<AdvancedMarkerRef>) => {\n    const {children} = props;\n    const [marker, contentContainer] = useAdvancedMarker(props);\n\n    const advancedMarkerContextValue: AdvancedMarkerContextValue | null =\n      useMemo(() => (marker ? {marker} : null), [marker]);\n\n    useImperativeHandle(ref, () => marker, [marker]);\n\n    if (!contentContainer) return null;\n\n    return (\n      <AdvancedMarkerContext.Provider value={advancedMarkerContextValue}>\n        {createPortal(children, contentContainer)}\n      </AdvancedMarkerContext.Provider>\n    );\n  }\n);\n\nexport function useAdvancedMarkerRef() {\n  const [marker, setMarker] =\n    useState<google.maps.marker.AdvancedMarkerElement | null>(null);\n\n  const refCallback = useCallback((m: AdvancedMarkerRef | null) => {\n    setMarker(m);\n  }, []);\n\n  return [refCallback, marker] as const;\n}\n", "/* eslint-disable complexity */\nimport React, {\n  ComponentType,\n  CSSProperties,\n  PropsWithChildren,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState\n} from 'react';\nimport {createPortal} from 'react-dom';\n\nimport {useMap} from '../hooks/use-map';\nimport {useMapsEventListener} from '../hooks/use-maps-event-listener';\nimport {setValueForStyles} from '../libraries/set-value-for-styles';\nimport {useMapsLibrary} from '../hooks/use-maps-library';\nimport {useDeepCompareEffect} from '../libraries/use-deep-compare-effect';\n\nexport type InfoWindowProps = Omit<\n  google.maps.InfoWindowOptions,\n  'headerContent' | 'content' | 'pixelOffset'\n> & {\n  style?: CSSProperties;\n  className?: string;\n  anchor?: google.maps.Marker | google.maps.marker.AdvancedMarkerElement | null;\n  pixelOffset?: [number, number];\n  shouldFocus?: boolean;\n  onClose?: () => void;\n  onCloseClick?: () => void;\n\n  headerContent?: ReactNode;\n};\n\n/**\n * Component to render an Info Window with the Maps JavaScript API\n */\nexport const InfoWindow = (props: PropsWithChildren<InfoWindowProps>) => {\n  const {\n    // content options\n    children,\n    headerContent,\n\n    style,\n    className,\n    pixelOffset,\n\n    // open options\n    anchor,\n    shouldFocus,\n\n    // events\n    onClose,\n    onCloseClick,\n\n    // other options\n    ...infoWindowOptions\n  } = props;\n\n  // ## create infowindow instance once the mapsLibrary is available.\n  const mapsLibrary = useMapsLibrary('maps');\n  const [infoWindow, setInfoWindow] = useState<google.maps.InfoWindow | null>(\n    null\n  );\n\n  const contentContainerRef = useRef<HTMLElement | null>(null);\n  const headerContainerRef = useRef<HTMLElement | null>(null);\n\n  useEffect(\n    () => {\n      if (!mapsLibrary) return;\n\n      contentContainerRef.current = document.createElement('div');\n      headerContainerRef.current = document.createElement('div');\n\n      const opts: google.maps.InfoWindowOptions = infoWindowOptions;\n      if (pixelOffset) {\n        opts.pixelOffset = new google.maps.Size(pixelOffset[0], pixelOffset[1]);\n      }\n\n      if (headerContent) {\n        // if headerContent is specified as string we can directly forward it,\n        // otherwise we'll pass the element the portal will render into\n        opts.headerContent =\n          typeof headerContent === 'string'\n            ? headerContent\n            : headerContainerRef.current;\n      }\n\n      // intentionally shadowing the state variables here\n      const infoWindow = new google.maps.InfoWindow(infoWindowOptions);\n      infoWindow.setContent(contentContainerRef.current);\n\n      setInfoWindow(infoWindow);\n\n      // unmount: remove infoWindow and content elements (note: close is called in a different effect-cleanup)\n      return () => {\n        infoWindow.setContent(null);\n\n        contentContainerRef.current?.remove();\n        headerContainerRef.current?.remove();\n\n        contentContainerRef.current = null;\n        headerContainerRef.current = null;\n\n        setInfoWindow(null);\n      };\n    },\n    // `infoWindowOptions` and other props are missing from dependencies:\n    //\n    // We don't want to re-create the infowindow instance\n    // when the options change.\n    // Updating the options is handled in the useEffect below.\n    //\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [mapsLibrary]\n  );\n\n  // ## update className and styles for `contentContainer`\n  // stores previously applied style properties, so they can be removed when unset\n  const prevStyleRef = useRef<CSSProperties | null>(null);\n  useEffect(() => {\n    if (!infoWindow || !contentContainerRef.current) return;\n\n    setValueForStyles(\n      contentContainerRef.current,\n      style || null,\n      prevStyleRef.current\n    );\n\n    prevStyleRef.current = style || null;\n\n    if (className !== contentContainerRef.current.className)\n      contentContainerRef.current.className = className || '';\n  }, [infoWindow, className, style]);\n\n  // ## update options\n  useDeepCompareEffect(\n    () => {\n      if (!infoWindow) return;\n\n      const opts: google.maps.InfoWindowOptions = infoWindowOptions;\n      if (!pixelOffset) {\n        opts.pixelOffset = null;\n      } else {\n        opts.pixelOffset = new google.maps.Size(pixelOffset[0], pixelOffset[1]);\n      }\n\n      if (!headerContent) {\n        opts.headerContent = null;\n      } else {\n        opts.headerContent =\n          typeof headerContent === 'string'\n            ? headerContent\n            : headerContainerRef.current;\n      }\n\n      infoWindow.setOptions(infoWindowOptions);\n    },\n\n    // dependency `infoWindow` isn't needed since options are also passed\n    // to the constructor when a new infoWindow is created.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [infoWindowOptions, pixelOffset, headerContent]\n  );\n\n  // ## bind event handlers\n  useMapsEventListener(infoWindow, 'close', onClose);\n  useMapsEventListener(infoWindow, 'closeclick', onCloseClick);\n\n  // ## open info window when content and map are available\n  const map = useMap();\n  useEffect(() => {\n    // `anchor === null` means an anchor is defined but not ready yet.\n    if (!map || !infoWindow || anchor === null) return;\n\n    const isOpenedWithAnchor = !!anchor;\n    const openOptions: google.maps.InfoWindowOpenOptions = {map};\n    if (anchor) {\n      openOptions.anchor = anchor;\n    }\n\n    if (shouldFocus !== undefined) {\n      openOptions.shouldFocus = shouldFocus;\n    }\n\n    infoWindow.open(openOptions);\n\n    return () => {\n      // Note: when the infowindow has an anchor, it will automatically show up again when the\n      // anchor was removed from the map before infoWindow.close() is called but the it gets\n      // added back to the map after that.\n      // More information here: https://issuetracker.google.com/issues/343750849\n      if (isOpenedWithAnchor) infoWindow.set('anchor', null);\n\n      infoWindow.close();\n    };\n  }, [infoWindow, anchor, map, shouldFocus]);\n\n  return (\n    <>\n      {contentContainerRef.current &&\n        createPortal(children, contentContainerRef.current)}\n\n      {headerContainerRef.current !== null &&\n        createPortal(headerContent, headerContainerRef.current)}\n    </>\n  );\n};\n", "import {useEffect, useMemo} from 'react';\nimport {createPortal} from 'react-dom';\nimport {useMap} from '../hooks/use-map';\n\nimport type {PropsWithChildren} from 'react';\n\ntype MapControlProps = PropsWithChildren<{\n  position: ControlPosition;\n}>;\n\n/**\n * Copy of the `google.maps.ControlPosition` constants.\n * They have to be duplicated here since we can't wait for the maps API to load to be able to use them.\n */\nexport const ControlPosition = {\n  TOP_LEFT: 1,\n  TOP_CENTER: 2,\n  TOP: 2,\n  TOP_RIGHT: 3,\n  LEFT_CENTER: 4,\n  LEFT_TOP: 5,\n  LEFT: 5,\n  LEFT_BOTTOM: 6,\n  RIGHT_TOP: 7,\n  RIGHT: 7,\n  RIGHT_CENTER: 8,\n  RIGHT_BOTTOM: 9,\n  BOTTOM_LEFT: 10,\n  BOTTOM_CENTER: 11,\n  BOTTOM: 11,\n  BOTTOM_RIGHT: 12,\n  CENTER: 13,\n  BLOCK_START_INLINE_START: 14,\n  BLOCK_START_INLINE_CENTER: 15,\n  BLOCK_START_INLINE_END: 16,\n  INLINE_START_BLOCK_CENTER: 17,\n  INLINE_START_BLOCK_START: 18,\n  INLINE_START_BLOCK_END: 19,\n  INLINE_END_BLOCK_START: 20,\n  INLINE_END_BLOCK_CENTER: 21,\n  INLINE_END_BLOCK_END: 22,\n  BLOCK_END_INLINE_START: 23,\n  BLOCK_END_INLINE_CENTER: 24,\n  BLOCK_END_INLINE_END: 25\n} as const;\nexport type ControlPosition =\n  (typeof ControlPosition)[keyof typeof ControlPosition];\n\nexport const MapControl = ({children, position}: MapControlProps) => {\n  const controlContainer = useMemo(() => document.createElement('div'), []);\n  const map = useMap();\n\n  useEffect(() => {\n    if (!map) return;\n\n    const controls = map.controls[position];\n\n    controls.push(controlContainer);\n\n    return () => {\n      const controlsArray = controls.getArray();\n      // controlsArray could be undefined if the map is in an undefined state (e.g. invalid API-key, see #276\n      if (!controlsArray) return;\n\n      const index = controlsArray.indexOf(controlContainer);\n      controls.removeAt(index);\n    };\n  }, [controlContainer, map, position]);\n\n  return createPortal(children, controlContainer);\n};\n", "/* eslint-disable complexity */\nimport React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useState\n} from 'react';\n\nimport {useMap} from '../hooks/use-map';\n\nimport type {Ref} from 'react';\n\ntype MarkerEventProps = {\n  onClick?: (e: google.maps.MapMouseEvent) => void;\n  onDrag?: (e: google.maps.MapMouseEvent) => void;\n  onDragStart?: (e: google.maps.MapMouseEvent) => void;\n  onDragEnd?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOver?: (e: google.maps.MapMouseEvent) => void;\n  onMouseOut?: (e: google.maps.MapMouseEvent) => void;\n};\n\nexport type MarkerProps = Omit<google.maps.MarkerOptions, 'map'> &\n  MarkerEventProps;\n\nexport type MarkerRef = Ref<google.maps.Marker | null>;\n\nfunction useMarker(props: MarkerProps) {\n  const [marker, setMarker] = useState<google.maps.Marker | null>(null);\n  const map = useMap();\n\n  const {\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    onMouseOver,\n    onMouseOut,\n    ...markerOptions\n  } = props;\n\n  const {position, draggable} = markerOptions;\n\n  // create marker instance and add to the map once the map is available\n  useEffect(() => {\n    if (!map) {\n      if (map === undefined)\n        console.error('<Marker> has to be inside a Map component.');\n\n      return;\n    }\n\n    const newMarker = new google.maps.Marker(markerOptions);\n    newMarker.setMap(map);\n    setMarker(newMarker);\n\n    return () => {\n      newMarker.setMap(null);\n      setMarker(null);\n    };\n    // We do not want to re-render the whole marker when the options change.\n    // Marker options update is handled in a useEffect below.\n    // Excluding markerOptions from dependency array on purpose here.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n\n  // attach and re-attach event-handlers when any of the properties change\n  useEffect(() => {\n    if (!marker) return;\n\n    const m = marker;\n\n    // Add event listeners\n    const gme = google.maps.event;\n\n    if (onClick) gme.addListener(m, 'click', onClick);\n    if (onDrag) gme.addListener(m, 'drag', onDrag);\n    if (onDragStart) gme.addListener(m, 'dragstart', onDragStart);\n    if (onDragEnd) gme.addListener(m, 'dragend', onDragEnd);\n    if (onMouseOver) gme.addListener(m, 'mouseover', onMouseOver);\n    if (onMouseOut) gme.addListener(m, 'mouseout', onMouseOut);\n\n    marker.setDraggable(Boolean(draggable));\n\n    return () => {\n      gme.clearInstanceListeners(m);\n    };\n  }, [\n    marker,\n    draggable,\n    onClick,\n    onDrag,\n    onDragStart,\n    onDragEnd,\n    onMouseOver,\n    onMouseOut\n  ]);\n\n  // update markerOptions (note the dependencies aren't properly checked\n  // here, we just assume that setOptions is smart enough to not waste a\n  // lot of time updating values that didn't change)\n  useEffect(() => {\n    if (!marker) return;\n    if (markerOptions) marker.setOptions(markerOptions);\n  }, [marker, markerOptions]);\n\n  // update position when changed\n  useEffect(() => {\n    // Should not update position when draggable\n    if (draggable || !position || !marker) return;\n\n    marker.setPosition(position);\n  }, [draggable, position, marker]);\n\n  return marker;\n}\n\n/**\n * Component to render a marker on a map\n */\nexport const Marker = forwardRef((props: MarkerProps, ref: MarkerRef) => {\n  const marker = useMarker(props);\n\n  useImperativeHandle(ref, () => marker, [marker]);\n\n  return <></>;\n});\n\nexport function useMarkerRef() {\n  const [marker, setMarker] = useState<google.maps.Marker | null>(null);\n\n  const refCallback = useCallback((m: google.maps.Marker | null) => {\n    setMarker(m);\n  }, []);\n\n  return [refCallback, marker] as const;\n}\n", "import {\n  Children,\n  PropsWithChildren,\n  useContext,\n  useEffect,\n  useMemo\n} from 'react';\nimport {AdvancedMarkerContext} from './advanced-marker';\nimport {createPortal} from 'react-dom';\nimport {logErrorOnce} from '../libraries/errors';\n\n/**\n * Props for the Pin component\n */\nexport type PinProps = google.maps.marker.PinElementOptions;\n\n/**\n * Component to configure the appearance of an AdvancedMarker\n */\nexport const Pin = (props: PropsWithChildren<PinProps>) => {\n  const advancedMarker = useContext(AdvancedMarkerContext)?.marker;\n  const glyphContainer = useMemo(() => document.createElement('div'), []);\n\n  // Create Pin View instance\n  useEffect(() => {\n    if (!advancedMarker) {\n      if (advancedMarker === undefined) {\n        console.error(\n          'The <Pin> component can only be used inside <AdvancedMarker>.'\n        );\n      }\n\n      return;\n    }\n\n    if (props.glyph && props.children) {\n      logErrorOnce(\n        'The <Pin> component only uses children to render the glyph if both the glyph property and children are present.'\n      );\n    }\n\n    if (Children.count(props.children) > 1) {\n      logErrorOnce(\n        'Passing multiple children to the <Pin> component might lead to unexpected results.'\n      );\n    }\n\n    const pinViewOptions: google.maps.marker.PinElementOptions = {\n      ...props\n    };\n\n    const pinElement = new google.maps.marker.PinElement(pinViewOptions);\n\n    // Set glyph to glyph container if children are present (rendered via portal).\n    // If both props.glyph and props.children are present, props.children takes priority.\n    if (props.children) {\n      pinElement.glyph = glyphContainer;\n    }\n\n    // Set content of Advanced Marker View to the Pin View element\n    advancedMarker.content = pinElement.element;\n  }, [advancedMarker, glyphContainer, props]);\n\n  return createPortal(props.children, glyphContainer);\n};\n", "const mapLinear = (x: number, a1: number, a2: number, b1: number, b2: number) =>\n  b1 + ((x - a1) * (b2 - b1)) / (a2 - a1);\n\nconst getMapMaxTilt = (zoom: number) => {\n  if (zoom <= 10) {\n    return 30;\n  }\n  if (zoom >= 15.5) {\n    return 67.5;\n  }\n\n  // range [10...14]\n  if (zoom <= 14) {\n    return mapLinear(zoom, 10, 14, 30, 45);\n  }\n\n  // range [14...15.5]\n  return mapLinear(zoom, 14, 15.5, 45, 67.5);\n};\n\n/**\n * Function to limit the tilt range of the Google map when updating the view state\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const limitTiltRange = ({viewState}: any) => {\n  const pitch = viewState.pitch;\n  const gmZoom = viewState.zoom + 1;\n  const maxTilt = getMapMaxTilt(gmZoom);\n\n  return {...viewState, fovy: 25, pitch: Math.min(maxTilt, pitch)};\n};\n"],
  "mappings": "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",
  "names": ["APILoadingStatus", "NOT_LOADED", "LOADING", "LOADED", "FAILED", "AUTH_FAILURE", "MAPS_API_BASE_URL", "GoogleMapsApiLoader", "load", "params", "onLoadingStatusChange", "_window$google", "libraries", "split", "serializedParams", "serializeParams", "listeners", "push", "window", "google", "maps", "importLibrary", "serializedApiParams", "loadingStatus", "notifyLoadingStatusListeners", "initImportLibrary", "console", "warn", "librariesToLoad", "Promise", "all", "map", "name", "v", "key", "language", "region", "authReferrerPolicy", "solutionChannel", "join", "error", "apiPromise", "loadApi", "resolve", "reject", "_document$querySelect", "scriptElement", "document", "createElement", "urlParams", "URLSearchParams", "value", "Object", "entries", "urlParamName", "replace", "t", "toLowerCase", "set", "async", "src", "toString", "nonce", "querySelector", "onerror", "Error", "__googleMapsCallback__", "gm_authFailure", "head", "append", "libraryName", "then", "fn", "DEFAULT_SOLUTION_CHANNEL", "APIProviderContext", "React", "createContext", "useMapInstances", "mapInstances", "setMapInstances", "useState", "addMapInstance", "mapInstance", "id", "instances", "_extends", "removeMapInstance", "_ref", "remaining", "_objectWithoutPropertiesLoose", "_toPropertyKey", "clearMapInstances", "useGoogleMapsApiLoader", "props", "onLoad", "apiKey", "version", "otherApiParams", "_excluded", "status", "setStatus", "loadedLibraries", "addLoadedLibrary", "useReducer", "action", "librariesString", "useMemo", "JSON", "stringify", "useCallback", "_google", "res", "useEffect", "length", "undefined", "APIProvider", "children", "loaderProps", "_excluded2", "contextValue", "Provider", "useMapEvents", "propName", "eventPropNames", "handler", "eventType", "propNameToEventType", "listener", "event", "addListener", "ev", "createMapEvent", "remove", "type", "srcEvent", "detail", "stoppable", "stop", "cameraEventTypes", "includes", "camEvent", "center", "getCenter", "zoom", "getZoom", "heading", "getHeading", "tilt", "getTilt", "bounds", "getBounds", "Number", "isFinite", "toJSON", "lat", "lng", "north", "east", "south", "west", "mouseEventTypes", "_srcEvent$latLng", "mouseEvent", "domEvent", "latLng", "placeId", "onBoundsChanged", "onCenterChanged", "onClick", "onContextmenu", "onDblclick", "onDrag", "onDragend", "onDragstart", "onHeadingChanged", "onIdle", "onIsFractionalZoomEnabledChanged", "onMapCapabilitiesChanged", "onMapTypeIdChanged", "onMousemove", "onMouseout", "onMouseover", "onProjectionChanged", "onRenderingTypeChanged", "onTilesLoaded", "onTiltChanged", "onZoomChanged", "onCameraChanged", "keys", "useDeepCompareEffect", "effect", "deps", "ref", "useRef", "current", "isDeepEqual", "mapOptionKeys", "Set", "useMapOptions", "mapProps", "mapOptions", "has", "setOptions", "useApiLoadingStatus", "_useContext", "useContext", "useDeckGLCameraUpdate", "viewport", "viewState", "isDeckGlControlled", "useLayoutEffect", "latitude", "longitude", "bearing", "pitch", "moveCamera", "isLatLngLiteral", "obj", "latLngEquals", "a", "b", "A", "toLatLngLiteral", "B", "useMapCameraParams", "cameraStateRef", "nextCamera", "needsUpdate", "AuthFailureMessage", "style", "position", "top", "left", "bottom", "right", "zIndex", "display", "flexFlow", "textAlign", "justifyContent", "fontSize", "color", "background", "padding", "useCallbackRef", "el", "setEl", "useApiIsLoaded", "useForceUpdate", "forceUpdate", "x", "handleBoundsChange", "assign", "useTrackedCameraStateRef", "CachedMapStack", "pop", "useMapInstance", "context", "apiIsLoaded", "setMap", "container", "containerRef", "defaultBounds", "defaultCenter", "defaultZoom", "defaultHeading", "defaultTilt", "reuseMaps", "hasZoom", "hasCenter", "savedMapStateRef", "mapId", "cacheKey", "mapDiv", "getDiv", "appendChild", "setTimeout", "setCenter", "height", "Map", "defBounds", "fitBounds", "savedMapId", "cameraState", "savedCameraState", "clearInstanceListeners", "GoogleMapsContext", "className", "mapRef", "isControlledExternally", "controlled", "disableDefaultUI", "gestureHandling", "keyboardShortcuts", "cameraOptions", "_lat", "_lng", "_props$zoom", "_props$heading", "_props$tilt", "combinedStyle", "width", "deckGLViewProps", "shownMessages", "logErrorOnce", "args", "add", "useMap", "ctx", "useMapsLibrary", "setValueForStyles", "element", "styles", "prevStyles", "elementStyle", "styleName", "hasOwnProperty", "setValueForStyle", "isCustomProperty", "indexOf", "setProperty", "cssFloat", "isUnitlessNumber", "trim", "unitlessNumbers", "useMapsEventListener", "target", "callback", "usePropBinding", "object", "prop", "CollisionBehavior", "REQUIRED", "REQUIRED_AND_HIDES_OPTIONAL", "OPTIONAL_AND_HIDES_LOWER_PRIORITY", "AdvancedMarkerContext", "useAdvancedMarker", "marker", "setMarker", "contentContainer", "setContentContainer", "prevStyleRef", "markerLibrary", "onDragStart", "onDragEnd", "collisionBehavior", "clickable", "draggable", "title", "numChildren", "Children", "count", "newMarker", "AdvancedMarkerElement", "contentElement", "content", "_contentElement", "gmpDraggable", "gmpClickable", "AdvancedMarker", "forwardRef", "advancedMarkerContextValue", "useImperativeHandle", "createPortal", "useAdvancedMarkerRef", "refCallback", "m", "InfoWindow", "headerContent", "pixelOffset", "anchor", "shouldFocus", "onClose", "onCloseClick", "infoWindowOptions", "mapsLibrary", "infoWindow", "setInfoWindow", "contentContainerRef", "headerContainerRef", "opts", "Size", "setContent", "_contentContainerRef$", "_headerContainerRef$c", "isOpenedWithAnchor", "openOptions", "open", "close", "Fragment", "ControlPosition", "TOP_LEFT", "TOP_CENTER", "TOP", "TOP_RIGHT", "LEFT_CENTER", "LEFT_TOP", "LEFT", "LEFT_BOTTOM", "RIGHT_TOP", "RIGHT", "RIGHT_CENTER", "RIGHT_BOTTOM", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM", "BOTTOM_RIGHT", "CENTER", "BLOCK_START_INLINE_START", "BLOCK_START_INLINE_CENTER", "BLOCK_START_INLINE_END", "INLINE_START_BLOCK_CENTER", "INLINE_START_BLOCK_START", "INLINE_START_BLOCK_END", "INLINE_END_BLOCK_START", "INLINE_END_BLOCK_CENTER", "INLINE_END_BLOCK_END", "BLOCK_END_INLINE_START", "BLOCK_END_INLINE_CENTER", "BLOCK_END_INLINE_END", "MapControl", "controlContainer", "controls", "controlsArray", "getArray", "index", "removeAt", "useMarker", "onMouseOver", "onMouseOut", "markerOptions", "Marker", "gme", "setDraggable", "Boolean", "setPosition", "useMarkerRef", "Pin", "advancedMarker", "glyphContainer", "glyph", "pinViewOptions", "pinElement", "PinElement", "mapLinear", "a1", "a2", "b1", "b2", "getMapMaxTilt", "limitTiltRange", "gmZoom", "maxTilt", "fovy", "Math", "min"]
}
